<Observer Pattern>

    한 객체의 상태가 바뀌면
    그 객체에 의존하는 다른 객체들한테 연락이 가고
    자동으로 내용이 갱신되는 방식으로 일대다(one-to-many) 의존성을 정의

    기본적인 형태
        주제(Subject) 인터페이스    - 정보를 수집 후 등록된 옵저버에 변경이 있을 때 정보를 보냄
        옵저버(Observer) 인터페이스 - 주제에 등록하여 최신 정보를 받아 사용




*** tip 디자인 원칙 ***
    * 서로 상호작용을 하는 객체 사이에서는 가능하면 느슨하게 결합(Loose coupling)하는 디자인을 사용



책 예문 요약
ex)
    interface Subject
        virtual registerObserver() = 0;
        virtual removeObserver() = 0;
        virtual notifyObservers() = 0;

    class WeatherData : public Subject
        public :
            registerObserver() { ... }
            removeObserver() { ... }
            notifyObservers() { ... }

            getTemprature() { ... }
            getHumidity() { ... }
            getPressure() { ... }
            measurementsChanged() { ... }


    interface Observer
        virtual update() = 0;
    
    interface DisplayElement
        virtual display() = 0;
    
    class CurrentConditions : public Observer, public DisplayElement
        public :
            update() { ... }
            display() { ...현재 측정값 표시 }
    
    class StaticsDisplay : public Observer, public DisplayElement
        public :
            update() { ... }
            display() { ...평균/최저/최고치 표시 }
    
    class ForecasatDisplay : public Observer, public DisplayElement
        public :
            update() { ... }
            display() { ...기상 예보 표시 }
    
    class ThirdPartyDisplay : public Observer, public DisplayElement
        public :
            update() { ... }
            display() { ...측정값 바탕으로 다른 내용 표시 }




적용 프로젝트 git에 올릴 예정(작업 중)       // https://github.com/Ddock2/DesignPattern
    (idea)
        music chart (subject)
            song    (observer)
            artist  (observer)