<Decoration Pattern>

    객체에 추가적인 요건을 동적으로 첨가
    서브클래스를 만드는 것을 통해서 기능을 유연하게 확장할 수 있는 방법 제공

    데코레이터의 수퍼클래스 = 자신이 장식하고 있는 객체의 수퍼클래스
    한 객체를 여러개의 데코레이터로 감쌀 수 있다
    원래 객체가 들어갈 자리에 데코레이터 객체를 넣을 수 있다 (같은 수퍼클래스 가졌기 때문)
    데코레이터는 자신이 장식하고 있는 객체에 어떤 행동을 위임하는 것 외에 원하는 추가적인 작업을 수행할 수 있다
    실행중 객체에 필요한 데코레이터를 마음대로 적용할 수 있다


    기본적인 형태
        Component 인터페이스        - 기본 기능의 ConcreteComponent와 추가 기능의 Decorator의 공통 기능 정의
            ConcreteComponent       - 동적으로 꾸며질 객체, 기본 기능을 구현하는 클래스
            Decorator               - 구체적인 Decorator의 공통 기능 제공
                ConcreteDecoratorA  - Decorator의 서브클래스, 기본 기능에 추가되는 개별적인 기능
                ConcreteDecoratorB



*** tip 디자인 원칙 ***
    * OCP(Open-Closed Principle)
        클래스는 확장에 대해서는 열려있어야 하지만 코드 변경에 대해서는 닫혀있어야 한다.



책 예문 요약
ex)
    // Component
    interface Beverage
        string descrpition = "";
        virtual getDescription() = 0;
        virtual cost() = 0;



    // ConcreteComponents
    class Espresso : public Beverage
        Espresso() { descrpition = "에스프레소"; }
        cost() { return 1.99; }

    class HouseBlend : public Beverage
        Espresso() { descrpition = "하우스 블렌드 커피"; }
        cost() { return 0.89; }



    // Decorator
    class CondimentDecorator : public Beverage
        virtual getDescription() = 0;



    // ConcreteDecorators
    class Milk : public Decorator
        Beverage beverage;
        Milk(Beverage beverage) { this.beverage = beverage; }
        getDescription() { return beverage.getDescription() + ", 우유"; }
        cost() { return 0.10 + beverage.cost(); }

    class Mocha : public Decorator
        Beverage beverage;
        Milk(Beverage beverage) { this.beverage = beverage; }
        getDescription() { return beverage.getDescription() + ", 모카"; }
        cost() { return 0.20 + beverage.cost(); }
    




적용 프로젝트 git에       // https://github.com/Ddock2/DesignPattern
    (idea)
        영수증
            (fruit shop, fish shop)
        물건 (Decorator)
            (apple, orange, tuna, octopus)