<Command Pattern>

    커맨드 패턴
        요구사항을 객체로 캡슐화 할 수 있으며, 매개변수를 써서 여러가지 다른 요구사항을 집어넣을 수 있다.
        요청 내용을 큐에 저장하거나 로그로 기록할 수 있으며, 작업취소 기능도 가능

        Java의 Thread 함수가 전형적인 Command 패턴의 형태
            ex)
                public class Main {
                    public static void main(String[] args) {
                        Thread t = new Thread(new Command());
                        t.start();
                    }
                }

                class Command implements Runnable {
                    @Override
                    public void run() {
                        System.out.println("RUN!");
                    }
                }


적용 프로젝트 git에       // https://github.com/Ddock2/DesignPattern
    Command
        Execute()
        Undo()

    ElectronicProduct
        PowerOn()
        PowerOff()

    Monitor : public ElectronicProduct
        BrightnessUp()
        BrightnessDown()
        
    Audio : public ElectronicProduct
        VolumeUp()
        VolumeDown()
        Mute()

    MonitorPowerOnCommand : public Command
    MonitorPowerOffCommand : public Command
    MonitorBrightnessUpCommand : public Command
    MonitorBrightnessDownCommand : public Command

    AudioPowerOnCommand : public Command
    AudioPowerOffCommand : public Command
    AudioVolumeUpCommand : public Command
    AudioVolumeDownCommand : public Command
    AudioMuteCommand : public Command
    
    RemomteControl
        Command *onCommand[];
        Command *offCommand[];

        SetCommand(int slot, Command onCommand, Command offCommand)
        ClickOnButton(int slot);
        ClickOffButton(int slot);
        ClickUndoButton();


*** 프로젝트 중 나온 문제 ***
    자원 회수 중 destructor 정상 호출 안되는 상황 발생
        C++에서 super class 자료형 변수에 sub class를 set 하여 사용시,
        해당 변수 delete() 하면 super class의 destructor(소멸자)만 동작하는 것 확인

        주의하여 delete 할 것 
